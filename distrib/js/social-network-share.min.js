(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports);
    global.socials = mod.exports;
  }
})(this, function (exports) {

  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function isFunction(obj) {
    return typeof obj === "function";
  }

  var getOrApply = function getOrApply(value, context, args2) {
    if (isFunction(value)) {
      return value.apply(context, [args2]);
    }
    return value;
  };

  var showLabelMinWidth = 640;
  var containerClass = "socials";
  var shareClass = "social";
  var shareLinkClass = "social-link";
  var shareLogoClass = "social-logo";
  var shareLabelClass = "social-label";

  var Share = exports.Share = function () {
    function Share(config) {
      _classCallCheck(this, Share);

      this.btns = null;
      window.on("resize", this.onWindowResize);
      this.update(config);
    }

    _createClass(Share, [{
      key: "showLabel",
      value: function showLabel(screenWidth) {
        return screenWidth > showLabelMinWidth;
      }
    }, {
      key: "onWindowResize",
      value: function onWindowResize() {
        if (isFunction(this.showLabel)) {
          window.clearTimeout(this._resizeTimer);
          this._resizeTimer = window.setTimeout(this.render, 200);
        }
      }
    }, {
      key: "getShare",
      value: function getShare(shareName) {
        var shares = this.config.shares.filter(function (x) {
          return x.name === shareName;
        });
        if (shares != null && shares.length > 0) {
          return shares[0];
        }
        return null;
      }
    }, {
      key: "update",
      value: function update(config) {
        this.config = Object.assign({ events: [], shareIn: "popup", collapsable: false }, config);
        this.container = qsi(this.config.containerId);
        this.container.addClass(containerClass);
        this.config.shares = this.config.shares.map(function (shareConfig) {
          if (typeof shareConfig === "string") {
            shareConfig = { name: shareConfig };
          }
          var found = shareTemplates.filter(function (item) {
            return item.name === shareConfig.name;
          });
          if (!found) {
            throw Error("Share '" + shareConfig.name + "' is not found");
          }
          return found[0];
        });
        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        this._clear();
        this._showLabel = getOrApply(this.showLabel, this, screen.width);

        this.btns = newElement("span");
        this.container.beforeEnd(this.btns);
        if (this.config.collapsable) {
          this.container.afterBegin(this.createCollapseButton());
        }
        this._renderShareButtons();
      }
    }, {
      key: "_renderShareButtons",
      value: function _renderShareButtons() {
        var ctx = this;
        this.config.shares.forEach(function (share) {
          ctx._renderShare(share);
        });
      }
    }, {
      key: "_renderShare",
      value: function _renderShare(share) {
        var btn = null;
        if (isFunction(share.renderer)) {
          btn = newElement("p", { class: shareClass }, share.renderer());
        } else {
          btn = this.createButton(share);
        }
        this.btns.beforeEnd(btn);
        btn.addClass(share.name);
      }
    }, {
      key: "createButton",
      value: function createButton(share) {
        return this.createButtonLink(share);
      }
    }, {
      key: "createCollapseButton",
      value: function createCollapseButton() {
        var ctx = this;
        var btn = newElement("a", { href: "#", class: shareLinkClass }, "", {
          click: function click() {
            ctx.btns.toggleVisible();
          }
        });
        btn.addClass("collapsable");
        this.btns.on("click", function () {
          ctx.btns.toggleVisible();
        });
        btn.beforeEnd(newElement("img", { class: shareLogoClass + " collapse" }));
        return btn;
      }
    }, {
      key: "getDescriptionToShare",
      value: function getDescriptionToShare() {
        var text = "";
        var meta = qs("meta[name='description']");
        if (meta !== null) {
          text = meta.attr("content");
        }
        return text;
      }
    }, {
      key: "getTitleToShare",
      value: function getTitleToShare() {
        var text = "";
        var title = qs("title");
        if (title !== null) {
          text = title.text || "";
        }
        return text;
      }
    }, {
      key: "onShareClick",
      value: function onShareClick(share) {
        var shareTarget = share.shareIn || this.config.shareIn;
        share.url = window.location.href;
        share.title = this.getTitleToShare();
        share.text = this.getDescriptionToShare();
        var shareUrl = this._getShareUrl(share);
        if (shareTarget === "popup") {
          window.open(shareUrl, null, "width=600, height=400, location=0, menubar=0, resizeable=0, scrollbars=0, status=0, titlebar=0, toolbar=0");
        } else if (shareTarget === "newWindow") {
          window.open(shareUrl);
        } else if (shareTarget === "currentWindow") {
          document.location.href = shareUrl;
        }
      }
    }, {
      key: "createButtonLink",
      value: function createButtonLink(share) {
        var ctx = this;
        var link = newElement("a", { href: "#", class: shareLinkClass, title: share.tooltip || "" }, "", { click: function click() {
            ctx.onShareClick(share);
          } });
        link.beforeEnd(this.createButtonLogo(share));
        if (this.config.showLabel && this._showLabel) {
          link.beforeEnd(this.createButtonLabel(share));
          if (this.config.minWidthWithLabel) {
            link.css({ "min-width": this.config.minWidthWithLabel });
          }
        }
        if (this.config.events !== null) {
          this.config.events.forEach(function (event, handler) {
            if (isFunction(handler)) {
              link.on(event, share);
            }
          });
        }
        return link;
      }
    }, {
      key: "_getShareUrl",
      value: function _getShareUrl(share) {
        return share.shareUrl.replace(/(&?[a-zA-Z0-9]+=)?{([a-zA-Z0-9]+)}/g, function (match, key, field) {
          var value = share[field] || "";
          return value ? (key || "") + window.encodeURIComponent(value) : "";
        });
      }
    }, {
      key: "createButtonLogo",
      value: function createButtonLogo(share) {
        var icon = null;
        if (share.img != null) {
          icon = newElement("img", { src: share.img });
        } else {
          icon = newElement("i", { class: share.class });
        }
        icon.addClass(shareLogoClass);
        return icon;
      }
    }, {
      key: "createButtonLabel",
      value: function createButtonLabel(share) {
        return newElement("span", { class: shareLabelClass }, share.label);
      }
    }, {
      key: "_clear",
      value: function _clear() {
        window.clearTimeout(this._resizeTimer);
        this.container.html("");
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this._clear();
        window.off("resize", this.onWindowResize);
        this.container.removeClass(containerClass);
      }
    }]);

    return Share;
  }();
});